/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.31
 * Generated at: 2024-11-04 01:10:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._2_005fmemberJoin;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class join_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/D:/STUDENTS/KIMCHEOLMIN/ai/IDE/apache-tomcat-10.1.31-jQuery/lib/jakarta.servlet.jsp.jstl-2.0.0.jar!/META-INF/c.tld", Long.valueOf(1602841572000L));
    _jspx_dependants.put("file:/D:/STUDENTS/KIMCHEOLMIN/ai/IDE/apache-tomcat-10.1.31-jQuery/lib/jakarta.servlet.jsp.jstl-2.0.0.jar", Long.valueOf(1730162933454L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody;

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.release();
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("	<meta charset=\"UTF-8\">\r\n");
      out.write("	<title>Insert title here</title>\r\n");
      out.write("	<link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${conPath }", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/join.css\" rel=\"stylesheet\">\r\n");
      out.write("	<!-- $('#id')의 keyup 이벤트에 $.ajax()구현 -->\r\n");
      out.write("	<!-- $('#pw, #pwChk)의 keyup 이벤트에 두 비밀번호 체크 -->\r\n");
      out.write("	<!-- $('form')의 submit 이벤트에 유효성 검사(#idConfirmResult, #pwChkResult) -->\r\n");
      out.write("  <script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"></script>\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css\">\r\n");
      out.write("  <script src=\"https://code.jquery.com/ui/1.13.2/jquery-ui.js\"></script>\r\n");
      out.write("  <script>\r\n");
      out.write("  	$(function(){\r\n");
      out.write("  		$('input[name=\"id\"]').keyup(function(){\r\n");
      out.write("  			var id = $(this).val();\r\n");
      out.write("  			if(id.length<2){\r\n");
      out.write("  				$('#idConfirmResult').text('아이디는 2글자 이상');\r\n");
      out.write("  			}else{\r\n");
      out.write("  				$.ajax({\r\n");
      out.write("  					url : '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${conPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/1_get_post_ajax/midConfirm.jsp',\r\n");
      out.write("  					type : 'get',\r\n");
      out.write("  					data : 'id='+id,\r\n");
      out.write("  					dataType : 'html',\r\n");
      out.write("  					success : function(data){\r\n");
      out.write("  						$('#idConfirmResult').html(data);\r\n");
      out.write("  					},\r\n");
      out.write("  				});// ajax함수\r\n");
      out.write("  			}//if\r\n");
      out.write("  		});// keyup event(아이디 중복체크)\r\n");
      out.write("  		\r\n");
      out.write("  		$('#pw, #pwChk').keyup(function(){\r\n");
      out.write("	  			var pw = $('#pw').val();\r\n");
      out.write("	  			var pwChk = $('#pwChk').val();\r\n");
      out.write("	  			if(!pw && !pwChk){\r\n");
      out.write("	  				$('#pwChkResult').text('비밀번호는 필수입력사항입니다');\r\n");
      out.write("	  			}else if(pw == pwChk){\r\n");
      out.write("	  				$('#pwChkResult').text('비밀번호 일치');\r\n");
      out.write("	  			}else{\r\n");
      out.write("	  				$('#pwChkResult').text('비밀번호 불일치');\r\n");
      out.write("	  			}\r\n");
      out.write("	  	});// keyup event(비밀번호 일치 확인용)\r\n");
      out.write("  		\r\n");
      out.write("  		$('form').submit(function(){\r\n");
      out.write("  		// \"사용 가능한 ID입니다\"(#idConfirmResult), \"비밀번호 일치(#pwChkResult)\"가 출력되었을 경우만 submit 가능\r\n");
      out.write("				var idConfirmResult = $('#idConfirmResult').text().trim();\r\n");
      out.write("  			var pwChkResult = $('#pwChkResult').text().trim();\r\n");
      out.write("  			if(idConfirmResult != '사용 가능한 ID입니다'){\r\n");
      out.write("  				alert('사용 가능한 ID인지 확인 요망');\r\n");
      out.write("  				return false; // submit 제한\r\n");
      out.write("  			}else if(pwChkResult != '비밀번호 일치'){\r\n");
      out.write("  				alert('비밀번호를 확인하세요');\r\n");
      out.write("  				$('#pw').focus();\r\n");
      out.write("  				return false;\r\n");
      out.write("  			}\r\n");
      out.write("  		});\r\n");
      out.write("  	});\r\n");
      out.write("  </script>\r\n");
      out.write("  <script>\r\n");
      out.write("  $( function() {\r\n");
      out.write("    $( \"#datepicker\" ).datepicker({\r\n");
      out.write("    	dateFormat: \"yy-mm-dd\",\r\n");
      out.write("    	monthNamesShort: ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'],\r\n");
      out.write("    	dayNamesMin: [ \"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\" ],\r\n");
      out.write("    	changeMonth: true, // 월을 바꿀수 있는 셀렉트 박스를 표시한다.\r\n");
      out.write("    	changeYear: true, // 년을 바꿀 수 있는 셀렉트 박스를 표시한다.\r\n");
      out.write("    	showMonthAfterYear: true,\r\n");
      out.write("    	yearSuffix: '년',\r\n");
      out.write("    	showOtherMonths: true, // 현재 달이 아닌 달의 날짜도 회색으로 표시\r\n");
      out.write("    	yearRange: 'c-100:c', // 년도 선택 셀렉트박스를 현재 년도에서 이전, 이후로 얼마의 범위를 \r\n");
      out.write("    });\r\n");
      out.write("  } );\r\n");
      out.write("  </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div id=\"joinForm_wrap\">\r\n");
      out.write("		<form>\r\n");
      out.write("			<div id=\"join_title\">회원가입</div>\r\n");
      out.write("			<table>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th><label for=\"id\">아이디</label></th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"text\" name=\"id\" id=\"id\" class=\"id\" required=\"required\" autocomplete=\"off\">\r\n");
      out.write("						<div id=\"idConfirmResult\"> &nbsp; &nbsp; &nbsp; </div>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th><label for=\"pw\">비밀번호</label></th>\r\n");
      out.write("					<td><input type=\"password\" name=\"pw\" id=\"pw\" class=\"pw\"></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th><label for=\"pwChk\">비밀번호확인</label></th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"password\" name=\"pwChk\" id=\"pwChk\" class=\"pwChk\">\r\n");
      out.write("						<div id=\"pwChkResult\"> &nbsp; &nbsp; &nbsp; </div>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th><label for=\"name\">이름</label></th>\r\n");
      out.write("					<td><input type=\"text\" name=\"name\" id=\"name\" class=\"name\" required=\"required\"></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>생년월일</th>\r\n");
      out.write("					<td><input type=\"text\" name=\"birth\" id=\"datepicker\" class=\"birth\" autocomplete=\"off\" ></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td colspan=\"2\">\r\n");
      out.write("						<input type=\"submit\" value=\"가입하기\" class=\"joinBtn_style\">\r\n");
      out.write("						<input type=\"reset\" value=\"다시하기\" class=\"joinBtn_style\">\r\n");
      out.write("						<input type=\"button\" value=\"로그인\" class=\"joinBtn_style\">\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</table>\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fset_005f0.setParent(null);
    // /2_memberJoin/join.jsp(4,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fset_005f0.setVar("conPath");
    // /2_memberJoin/join.jsp(4,0) name = value type = jakarta.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
    _jspx_th_c_005fset_005f0.setValue(new org.apache.jasper.el.JspValueExpression("/2_memberJoin/join.jsp(4,0) '${pageContext.request.contextPath }'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${pageContext.request.contextPath }",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
    int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
    if (_jspx_th_c_005fset_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f0);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f0, _jsp_getInstanceManager());
    return false;
  }
}
